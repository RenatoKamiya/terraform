#Terraform state -

 inseri as informações da instancia em um documento terraform.tfstate
O Terraform deve armazenar o estado sobre sua infraestrutura e configuração gerenciadas. Esse estado é usado pelo Terraform para mapear os recursos do mundo real para sua configuração, acompanhar os metadados e melhorar o desempenho de grandes infraestruturas.
Esse estado é armazenado por padrão em um arquivo local chamado "terraform.tfstate", mas também pode ser armazenado remotamente, o que funciona melhor em um ambiente de equipe.

-- A pasta ja existe ao iniciar o TF

terraform apply -auto-approve


Output=
ex:

resource "aws_vpc" "myfirstvpc" {
    cidr_block = "10.0.0.0/16"

        region = "SP"
    }

output "VPCID" {
  value = "${aws_vpc.myfirstvpc.id}"
}

--------------------


#eip - Elastic IP

resource "aws_instance" "ec2" {
    ami = "ami-0a8302bf9ba144bf1"
    instance_type = "t2.micro"
  
    tags = {
      nAME = "Public IP"
    }
}

resource "aws_eip" "elastic_ip" {
    instance = "${aws_instance.ec2.id}"
  
}

output "Public IP" {
  value = "${aws_eip.elastic_ip.public_ip}"
}


--------------


subindo regras e um script dentro de um server BD

resource "aws_instance" "db" {
  ami           = "ami-0a8302bf9ba144bf1"
  instance_type = "t2.micro"

  tags = {
    Name = "DB"
  }
}

resource "aws_instance" "web" {
  ami             = "ami-0a8302bf9ba144bf1"
  instance_type   = "t2.micro"
  security_groups = ["${aws_security_group.web_sg.name}"]
  user_data       = "${file("server-script.sh")}"

  tags = {
    Name = "Web"
  }
}

resource "aws_security_group" "web_sg" {
  name = "web_sg"

  ingress {
    to_port     = 80
    from_port   = 80
    protocol    = "TCP"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    to_port     = 80
    from_port   = 80
    protocol    = "TCP"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    to_port     = 443
    from_port   = 443
    protocol    = "TCP"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    to_port     = 443
    from_port   = 443
    protocol    = "TCP"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_eip" "web_ip" {
  instance = "${aws_instance.web.id}"
}

output "DB Private IP" {
  value = "${aws_instance.db.private_ip}"
}

output "Web Public IP" {
  value = "${aws_eip.web_ip.public_ip}"
}

---------------------------------


#MODULOS
- PASTA RAIZ ONDE FICA O MAIN.TF Terá a configuração para chamar o modulo que esta na subpasta
ex:pasta raiz modulo-demo subpasta ec2
(module-demo)
#main.tf
resource "aws_iam_user" "mainUser" {
    name = "MainUser"
}
module "ec2module"{
    source = "./ec2"
    ec2name = "My first Module"
}

(module-demo)
#provider.tf
provider "aws" {
    access_key = "AKIAT6MIRBYOTDRMRKGG"
    secret_key = "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"
    region     = "sa-east-1"
}

--------------
subpasta module-demo>ec2
(ec2) onde ficará o arquivo com o modulo
#ec2.tf

variable "ec2name" {
    type = "string"
  
}



resource "aws_instance" "moduleEC2" {
    ami = "ami-0a8302bf9ba144bf1"
    instance_type = "t2.micro"

    tags = {
        Name = "${var.ec2name}"
    }
}

-----------------------------------------------------------------------------------------
#REMOTE MODULES
Verificar a documentação;;

-------------

Terraform Registry

----------


CRIAR MULTIPLAS INSTANCIAS

resource "aws_instance" "web" {
    ami = "ami-0a8302bf9ba144bf1"
    instance_type = "t2.micro"

    count = 3  ---chave do sucesso

}

------------------------------------------------
mudanças do terraform 0.12
no more string interpolation for atributes"${}"

uso do comando "for" loop expressions ans aplat operators

dynamic blocks

--------------------










